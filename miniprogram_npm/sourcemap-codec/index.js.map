{"version":3,"sources":["sourcemap-codec.umd.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.sourcemapCodec = {}));\n}(this, function (exports) { \n\n\tvar charToInteger = {};\n\tvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\tfor (var i = 0; i < chars.length; i++) {\n\t    charToInteger[chars.charCodeAt(i)] = i;\n\t}\n\tfunction decode(mappings) {\n\t    var decoded = [];\n\t    var line = [];\n\t    var segment = [\n\t        0,\n\t        0,\n\t        0,\n\t        0,\n\t        0,\n\t    ];\n\t    var j = 0;\n\t    for (var i = 0, shift = 0, value = 0; i < mappings.length; i++) {\n\t        var c = mappings.charCodeAt(i);\n\t        if (c === 44) { // \",\"\n\t            segmentify(line, segment, j);\n\t            j = 0;\n\t        }\n\t        else if (c === 59) { // \";\"\n\t            segmentify(line, segment, j);\n\t            j = 0;\n\t            decoded.push(line);\n\t            line = [];\n\t            segment[0] = 0;\n\t        }\n\t        else {\n\t            var integer = charToInteger[c];\n\t            if (integer === undefined) {\n\t                throw new Error('Invalid character (' + String.fromCharCode(c) + ')');\n\t            }\n\t            var hasContinuationBit = integer & 32;\n\t            integer &= 31;\n\t            value += integer << shift;\n\t            if (hasContinuationBit) {\n\t                shift += 5;\n\t            }\n\t            else {\n\t                var shouldNegate = value & 1;\n\t                value >>>= 1;\n\t                if (shouldNegate) {\n\t                    value = value === 0 ? -0x80000000 : -value;\n\t                }\n\t                segment[j] += value;\n\t                j++;\n\t                value = shift = 0; // reset\n\t            }\n\t        }\n\t    }\n\t    segmentify(line, segment, j);\n\t    decoded.push(line);\n\t    return decoded;\n\t}\n\tfunction segmentify(line, segment, j) {\n\t    // This looks ugly, but we're creating specialized arrays with a specific\n\t    // length. This is much faster than creating a new array (which v8 expands to\n\t    // a capacity of 17 after pushing the first item), or slicing out a subarray\n\t    // (which is slow). Length 4 is assumed to be the most frequent, followed by\n\t    // length 5 (since not everything will have an associated name), followed by\n\t    // length 1 (it's probably rare for a source substring to not have an\n\t    // associated segment data).\n\t    if (j === 4)\n\t        line.push([segment[0], segment[1], segment[2], segment[3]]);\n\t    else if (j === 5)\n\t        line.push([segment[0], segment[1], segment[2], segment[3], segment[4]]);\n\t    else if (j === 1)\n\t        line.push([segment[0]]);\n\t}\n\tfunction encode(decoded) {\n\t    var sourceFileIndex = 0; // second field\n\t    var sourceCodeLine = 0; // third field\n\t    var sourceCodeColumn = 0; // fourth field\n\t    var nameIndex = 0; // fifth field\n\t    var mappings = '';\n\t    for (var i = 0; i < decoded.length; i++) {\n\t        var line = decoded[i];\n\t        if (i > 0)\n\t            mappings += ';';\n\t        if (line.length === 0)\n\t            continue;\n\t        var generatedCodeColumn = 0; // first field\n\t        var lineMappings = [];\n\t        for (var _i = 0, line_1 = line; _i < line_1.length; _i++) {\n\t            var segment = line_1[_i];\n\t            var segmentMappings = encodeInteger(segment[0] - generatedCodeColumn);\n\t            generatedCodeColumn = segment[0];\n\t            if (segment.length > 1) {\n\t                segmentMappings +=\n\t                    encodeInteger(segment[1] - sourceFileIndex) +\n\t                        encodeInteger(segment[2] - sourceCodeLine) +\n\t                        encodeInteger(segment[3] - sourceCodeColumn);\n\t                sourceFileIndex = segment[1];\n\t                sourceCodeLine = segment[2];\n\t                sourceCodeColumn = segment[3];\n\t            }\n\t            if (segment.length === 5) {\n\t                segmentMappings += encodeInteger(segment[4] - nameIndex);\n\t                nameIndex = segment[4];\n\t            }\n\t            lineMappings.push(segmentMappings);\n\t        }\n\t        mappings += lineMappings.join(',');\n\t    }\n\t    return mappings;\n\t}\n\tfunction encodeInteger(num) {\n\t    var result = '';\n\t    num = num < 0 ? (-num << 1) | 1 : num << 1;\n\t    do {\n\t        var clamped = num & 31;\n\t        num >>>= 5;\n\t        if (num > 0) {\n\t            clamped |= 32;\n\t        }\n\t        result += chars[clamped];\n\t    } while (num > 0);\n\t    return result;\n\t}\n\n\texports.decode = decode;\n\texports.encode = encode;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=sourcemap-codec.umd.js.map\n"]}